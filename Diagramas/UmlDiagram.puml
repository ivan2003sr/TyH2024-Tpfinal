@startuml ComfyChair 

class Usuario {
    - nombreCompleto: String
    - afiliacion: String
    - email: String
    - contrase√±a: String
}

class Conferencia {
    - nombre: String
    - fechaInicio: Date
    - fechaFin: Date
    + crearSesion(tipo: TipoSesion): Sesion
}

abstract class Sesion {
    - tema: String
    - deadline: Date
    - numeroMaximoArticulosAceptados: int
    - tipo: TipoSesion
    + setMetodoSeleccion(metodo: MetodoSeleccion, tipoArticulo: TipoArticulo): void
    + seleccionarArticulos(): void
}

class SesionRegular extends Sesion {
    + seleccionarArticulos(): void
}

class SesionWorkshop extends Sesion {
    - metodoSeleccionRegular: MetodoSeleccion
    - metodoSeleccionPoster: MetodoSeleccion
    + setMetodoSeleccion(metodo: MetodoSeleccion, tipo: TipoArticulo): void
    + seleccionarArticulos(): void
}

class SesionPoster extends Sesion {
    + seleccionarArticulos(): void
}

class Articulo {
    - titulo: String
    - urlArchivoAdjunto: String
    - estado: EstadoArticulo
    - cantidadRevisores: int
    - tipo: TipoArticulo
    + addObserver(observer: Usuario): void
    + notifyObservers(): void
}

enum EstadoArticulo {
    Recepcion
    Bidding
    Asignacion
    Revision
    Seleccion
    Aceptado
    Rechazado
}

class ArticuloRegular extends Articulo {
    - abstract: String
}

class Poster extends Articulo {
    - urlFuentes: String
}

class Revision {
    - texto: String
    - puntaje: int
    - tipoDeInteres : TipoDeInteres
}

class Rol {
    - tipo: String
}

class Bid {
    - tipoDeInteres: TipoDeInteres
}

enum TipoDeInteres {
    Interesado
    Quizas
    NoInteresado
}

interface MetodoSeleccion {
    + seleccionar(articulos: List<Articulo>): List<Articulo>
}

class MetodoSeleccionCorteFijo implements MetodoSeleccion {
    - corteFijo: float
    + seleccionar(articulos: List<Articulo>): List<Articulo>
}

class MetodoSeleccionMejores implements MetodoSeleccion {
    - puntajeMinimo: int
    + seleccionar(articulos: List<Articulo>): List<Articulo>
}

enum TipoSesion {
    Regular
    Workshop
    Poster
}

enum TipoArticulo {
    Regular
    Poster
}

Usuario "1" -- "0..*" Rol
Conferencia "1" -- "0..*" Sesion : crea
Sesion "1" -- "0..*" Articulo : contiene
Articulo "0..*" -- "1..*" Usuario : Autores
Articulo "1" -- "1" Usuario : AutorEncargado
Articulo <|-- ArticuloRegular
Articulo <|-- Poster
Articulo "0..*" -- "0..*" Revision : revisadoPor
Usuario "0..*" -- "0..*" Revision : realiza
Articulo "1" -- "0..*" Bid : recibe
Bid "0..*" -- "1" Usuario : ofrece
Articulo "1" -- "3" Usuario : revisores
Sesion *-- MetodoSeleccion : usa
SesionWorkshop "1" -- "1" MetodoSeleccion : usaRegular
SesionWorkshop "1" -- "1" MetodoSeleccion : usaPoster
Articulo "1" -- "0..*" Usuario : observers
Sesion "1" -- "1" TipoSesion
Articulo "1" -- "1" TipoArticulo
Revision "1" -- "1" EstadoArticulo
Bid "1" -- "1" TipoDeInteres

@enduml
